=============== Log rollover at Thu Mar 23 21:36:53 2023 ===============
Starting Klippy...
Args: ['/home/klipper/klipper/klippy/klippy.py', '/home/klipper/printer_data/config/printer.cfg', '-I', '/home/klipper/printer_data/comms/klippy.serial', '-l', '/home/klipper/printer_data/logs/klippy.log', '-a', '/home/klipper/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-127-g4b1536d6'
CPU: 4 core 12th Gen Intel(R) Core(TM) i7-1260P
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Thu Mar 23 21:36:55 2023 (1679578615.5 15.2)
===== Config file =====
[virtual_sdcard]
path = /home/klipper/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	TURN_OFF_HEATERS
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z4.5 F300
	G90
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
	G28 X Y
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	G1 Y{y_park} F2000
	M84
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	PAUSE_BASE
	G91
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}
variable_extrude = 1.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G91
	G1 E{E} F2100
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable':True, 'call':params.MACRO|default("PAUSE")}}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% if params.LAYER is defined %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': True, 'layer':params.LAYER|int, 'call':params.MACRO|default("PAUSE")}}"
	{% else %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer':0, 'call':"PAUSE"}}"
	{% endif %}

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = {'enable':False, 'call':"PAUSE"}
variable_pause_at_layer = {'enable':False, 'layer':0, 'call':"PAUSE"}
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable': False, 'call':"PAUSE"}}"
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer': 0, 'call':"PAUSE"}}"
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = False if not macro_found
	else False if client.use_custom_pos is not defined
	else True  if client.use_custom_pos|lower == 'true'
	else False %}
	{% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
	{% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
	{% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	{% set use_fw_retract = False if not macro_found
	else False if client.use_fw_retract is not defined
	else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
	else False %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.unretract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_unretract|default(35) %}
	
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
	
	{% set length = (params.LENGTH|float) if params.LENGTH is defined
	else 1.0 if not macro_found
	else client.retract|default(1.0) %}
	
	{% set speed = params.SPEED if params.SPEED is defined
	else 35 if not macro_found
	else client.speed_retract|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro CONDITIONAL_HOME]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro HOME]
gcode = 
	G28

[gcode_macro CENTER]
gcode = 
	CONDITIONAL_HOME
	G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F9000

[gcode_macro BACK_RIGHT]
gcode = 
	CONDITIONAL_HOME
	G0 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_maximum.y - 5} F9000

[gcode_macro BACK_LEFT]
gcode = 
	CONDITIONAL_HOME
	G0 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_maximum.y - 5} F9000

[gcode_macro ACCEL_SILENT]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY=300
	SET_VELOCITY_LIMIT ACCEL=2000
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=1000
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5

[gcode_macro ACCEL_LOW]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY=500
	SET_VELOCITY_LIMIT ACCEL=3000
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=1500
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=10

[gcode_macro ACCEL_MEDIUM]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY=500
	SET_VELOCITY_LIMIT ACCEL=5000
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2500
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=20

[gcode_macro ACCEL_GRIDFINITY_VASE]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY=300
	SET_VELOCITY_LIMIT ACCEL=4000
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2000
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=3

[gcode_macro ACCEL_HIGH]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY=500
	SET_VELOCITY_LIMIT ACCEL=7000
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=3500
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=25

[gcode_macro ACCEL_ULTRA]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY=500
	SET_VELOCITY_LIMIT ACCEL=8000
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=4000
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=30

[gcode_macro G29]
gcode = 
	G28
	BED_MESH_CALIBRATE
	G1 X0 Y0 Z10 F4200

[gcode_macro PRIME_NOZZLE]
gcode = 
	CONDITIONAL_HOME
	
	G1 X-1.6 Y0 Z0.25 F2000
	G92 E0
	G1 X-1.6 Y140 E12 F2000
	G1 X-0.8 Y140 F2000
	G92 E0
	G1 X-0.8 Y0 E12 F2000
	G92 E0
	G1 X0.0 Y0 Z5 F2000

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BED_MESH_CALIBRATE_EXISTING
gcode = 
	CONDITIONAL_HOME
	SET_VELOCITY_LIMIT VELOCITY=150
	SET_VELOCITY_LIMIT ACCEL=1500
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=750
	BED_MESH_CALIBRATE_EXISTING
	ACCEL_MEDIUM

[gcode_macro START_PRINT]
description = Start print
variable_bed_temp = 60
variable_extruder_temp = 205
gcode = 
	BED_MESH_PROFILE LOAD=default
	
	M104 S{extruder_temp}
	M140 S{bed_temp}
	
	G90
	CONDITIONAL_HOME
	
	M190 S{bed_temp}
	
	
	M109 S{extruder_temp}
	
	
	G1 X0 Y0 Z10 F5000.0
	PRIME_NOZZLE

[gcode_macro END_PRINT]
description = End print
gcode = 
	G91
	
	G92 E0
	G1 E-0.8 Z0.2 F2400
	G1 X5 Y5 F3000
	G1 Z10
	G90
	G1 X220 Y220
	M106 S0
	M104 S0
	M140 S0
	M84 X Y E

[gcode_macro TEST_X_AXIS]
description = Move X axis back and forth for a few times
gcode = 
	CONDITIONAL_HOME
	{% for i in range( params.CYCLES|default(2)|int ) %}
	G0 X{printer.toolhead.axis_minimum.x + 10} F{ params.SPEED|default(150)|float * 60 }
	G0 X{printer.toolhead.axis_maximum.x - 10} F{ params.SPEED|default(150)|float * 60 }
	{% endfor %}

[gcode_macro TEST_Y_AXIS]
description = Move Y axis back and forth for a few times
gcode = 
	CONDITIONAL_HOME
	{% for i in range( params.CYCLES|default(2)|int ) %}
	G0 Y{printer.toolhead.axis_minimum.y + 10} F{ params.SPEED|default(150)|float * 60 }
	G0 Y{printer.toolhead.axis_maximum.y - 10} F{ params.SPEED|default(150)|float * 60 }
	{% endfor %}

[gcode_macro TEST_Z_AXIS]
description = Move Z axis back and forth for a few times
gcode = 
	CONDITIONAL_HOME
	{% for i in range( params.CYCLES|default(2)|int ) %}
	G0 Z{printer.toolhead.axis_minimum.z + 10} F{ params.SPEED|default(40)|float * 60 }
	G0 Z{printer.toolhead.axis_maximum.z - 10} F{ params.SPEED|default(40)|float * 60 }
	{% endfor %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[stepper_x]
step_pin = PC2
dir_pin = !PB9
enable_pin = !PC3
rotation_distance = 40
microsteps = 16
endstop_pin = !PA5
position_min = -5
position_endstop = 220
position_max = 220
homing_speed = 150

[stepper_y]
step_pin = PB8
dir_pin = !PB7
enable_pin = !PC3
rotation_distance = 40
microsteps = 16
endstop_pin = !PA6
position_min = -2
position_endstop = 220
position_max = 220
homing_speed = 150

[stepper_z]
step_pin = PB6
dir_pin = PB5
enable_pin = !PC3
rotation_distance = 8
microsteps = 16
endstop_pin = probe:z_virtual_endstop
position_min = -10
position_max = 280
homing_speed = 30
second_homing_speed = 1
homing_retract_dist = 2.0

[extruder]
max_extrude_only_distance = 1000.0
step_pin = PB4
dir_pin = PB3
enable_pin = !PC3
rotation_distance = 7.54287688
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
pressure_advance = 0.026
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
min_temp = 0
max_temp = 305
control = pid
pid_kp = 21.090
pid_ki = 1.192
pid_kd = 93.322

[heater_bed]
heater_pin = PA7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
min_temp = 0
max_temp = 130
control = pid
pid_kp = 66.299
pid_ki = 0.582
pid_kd = 1889.528

[verify_heater extruder]
check_gain_time = 200
hysteresis = 5

[fan]
pin = PA0
kick_start_time = 0.5

[heater_fan nozzle_fan]
pin = PC0
max_power = 0.8
shutdown_speed = 0
heater = extruder
heater_temp = 60
fan_speed = 1.0

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[input_shaper]
shaper_type = mzv
shaper_freq_x = 30.5
shaper_freq_y = 40

[filament_switch_sensor filament_sensor]
pause_on_runout = true
switch_pin = ^!PC15

[bltouch]
sensor_pin = ^PC14
control_pin = PC13
x_offset = -11
y_offset = 27
speed = 5
lift_speed = 15
stow_on_each_sample = false
probe_with_touch_mode = true
samples = 2
z_offset = 1.430

[safe_z_home]
home_xy_position = 121, 94
speed = 200
z_hop = 5
z_hop_speed = 10

[bed_mesh]
speed = 225
horizontal_move_z = 3
mesh_min = 16, 27
mesh_max = 204, 215
probe_count = 9, 9
mesh_pps = 3, 3
algorithm = bicubic
relative_reference_index = 40

[bed_screws]
screw1 = 25, 33
screw2 = 202, 33
screw3 = 202, 202
screw4 = 25, 202

[printer]
kinematics = cartesian
max_velocity = 500
max_accel = 5000
max_z_velocity = 40
max_z_accel = 1250
square_corner_velocity = 20.0

[bed_mesh default]
version = 1
points = 
	0.046250, 0.041250, 0.061250, 0.038750, 0.047500, 0.057500, 0.021250, 0.007500, 0.012500
	-0.010000, -0.005000, 0.015000, 0.005000, 0.003750, 0.012500, -0.001250, -0.032500, -0.032500
	0.016250, 0.030000, 0.010000, 0.015000, 0.031250, 0.020000, -0.001250, -0.017500, -0.011250
	0.010000, 0.010000, 0.016250, 0.006250, 0.020000, 0.003750, -0.003750, -0.025000, -0.036250
	-0.012500, 0.001250, -0.017500, 0.006250, 0.000000, 0.000000, -0.032500, -0.022500, -0.056250
	-0.015000, -0.006250, -0.013750, -0.003750, -0.020000, -0.025000, -0.032500, -0.026250, -0.053750
	0.020000, 0.010000, 0.007500, -0.001250, 0.006250, -0.010000, -0.008750, 0.008750, -0.002500
	0.011250, 0.000000, 0.020000, 0.027500, 0.017500, 0.012500, 0.030000, 0.002500, 0.000000
	0.043750, 0.017500, 0.020000, 0.036250, 0.037500, 0.057500, 0.038750, 0.051250, 0.073750
x_count = 9
y_count = 9
mesh_x_pps = 3
mesh_y_pps = 3
algo = bicubic
tension = 0.2
min_x = 16.0
max_x = 204.0
min_y = 27.0
max_y = 215.0
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
webhooks client 139870222660752: New connection
webhooks client 139870222660752: Client info {'program': 'Moonraker', 'version': 'v0.8.0-29-g80920dd'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
MCU error during connect
Traceback (most recent call last):
  File "/home/klipper/klipper/klippy/mcu.py", line 798, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/klipper/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/klipper/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/klipper/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/klipper/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/klipper/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/klipper/klipper/klippy/mcu.py", line 803, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
No build file /home/klipper/klipper/klippy/../.config
No build file /home/klipper/klipper/klippy/../out/klipper.dict
No build file /home/klipper/klipper/klippy/../out/klipper.elf
